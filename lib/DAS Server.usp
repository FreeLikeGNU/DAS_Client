/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name: HPE
System Name: DAS Server
System Number:
Programmer: DOP
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
#SYMBOL_NAME "DAS Server"
#HINT "TCP Server based on Digital, Analog and Serial signals so that action is similar to a touch panel"
#DEFINE_CONSTANT MAX_INPUTS 50
#DEFINE_CONSTANT MAX_STRING_LENGTH 256
#DEFINE_CONSTANT MAX_MSG_LENGTH 512
#DEFINE_CONSTANT MAX_BUFFER_LENGTH 1024

// #CATEGORY "" 
#CATEGORY "35" // e-control Software
// #PRINT_TO_TRACE
#DIGITAL_EXPAND InputsWithOutputs
#ANALOG_SERIAL_EXPAND InputsWithOutputs
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
// #ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM

#HELP_BEGIN
DAS Server Module

This is a server intended for use with other programming interfaces (node.js),
that will interact similar to a touch panel.

The module creates a TCP Server on the Creston system (only tested on an MC3),
which communicates with the third party interface using a plain text socket.

The third party interface communicates with the Server using three commands:

Set - Sets the status
Get - Gets the status from the Crestron system
Event - Push a status change on the Crestron system to third party
#HELP_END


/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/

DIGITAL_INPUT _SKIP_, _SKIP_;
DIGITAL_INPUT Digital_TX[MAX_INPUTS,1];
ANALOG_INPUT Analog_TX[MAX_INPUTS,1];
STRING_INPUT Serial_TX[MAX_INPUTS,1][MAX_STRING_LENGTH];
// BUFFER_INPUT 


DIGITAL_OUTPUT 	_SKIP_, _SKIP_;
DIGITAL_OUTPUT Digital_RX[MAX_INPUTS,1];
ANALOG_OUTPUT Analog_RX[MAX_INPUTS,1];
STRING_OUTPUT Serial_RX[MAX_INPUTS,1];

/*******************************************************************************************
  SOCKETS
  (Uncomment and define socket definitions as needed)
*******************************************************************************************/
// TCP_CLIENT
TCP_SERVER DAS_Server[9999];
// UDP_SOCKET

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/

STRING_PARAMETER IPAddr$[16];
INTEGER_PARAMETER Port;

// INTEGER_PARAMETER
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
// STRING_PARAMETER

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/

#BEGIN_PARAMETER_PROPERTIES IPAddr$  // To restrict IP access, enter client IP in module.
   propDefaultValue = "0.0.0.0";
   propShortDescription = "Allow Connections from IP";
#END_PARAMETER_PROPERTIES
#BEGIN_PARAMETER_PROPERTIES Port
   propValidUnits = unitDecimal;
   propDefaultValue = 64079d;
   propShortDescription = "Port";
#END_PARAMETER_PROPERTIES


/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/

STRUCTURE DAS_meta
{
    STRING SignalType[10];
	STRING Cmd[100];
	STRING Value[MAX_STRING_LENGTH];
    INTEGER Index;
};


/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
SIGNED_INTEGER doServerConnected;
String InternalRxBuffer[65000];

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/

function StartServer() {
	SIGNED_INTEGER status;
	status = SocketServerStartListen(DAS_Server, IPAddr$, Port);
	if (status < 0) {
		Print("Error listening to %s on port %u (status: %d)", IPAddr$, Port, status);
	} else {
        Print("Server started to %s on port %u (status: %d)", IPAddr$, Port, status);
	}
}

function SocketTx(STRING ServerTx) {
    signed_integer iStatus;
	integer bodyLength;
	String Temp$[MAX_BUFFER_LENGTH];
	
	bodyLength = LEN(ServerTx);

	Temp$ = "<DAS_transmission>" + "<bodySize>" + ItoA(bodyLength) + "</bodySize>" + "<body>" + ServerTx + "</body>" + "</DAS_transmission>";
    iStatus = SocketSend(DAS_Server, Temp$);

    if (iStatus < 0) {
		TRACE("Error Sending to DAS_Server: %d\n", iStatus);
    } else {
		//TRACE("Sent %s\n", Temp$);
	}
}

function CmdBuilder(STRING SignalType, STRING Index, STRING Cmd, String Value) {
	STRING CmdBuilder$[MAX_MSG_LENGTH];
 	CmdBuilder$ = "<signalType>" + SignalType + "</signalType>" + "<index>" + Index + "</index>" + "<command>" + Cmd + "</command>" + "<value>" + Value + "</value>";
	SocketTx(CmdBuilder$); // Use a proper queue in future?
}

function CmdBuilder_data(DAS_meta data) {
	STRING CmdBuilder$[MAX_MSG_LENGTH];
 	CmdBuilder$ = "<signalType>" + data.SignalType + "</signalType>" + "<index>" + ItoA(data.Index) + "</index>" + "<command>" + data.Cmd + "</command>" + "<value>" + data.Value + "</value>";
	SocketTx(CmdBuilder$); // Use a proper queue in future?
}

function CmdParser(STRING ServerRx) {
	DAS_meta data;
	STRING	start$[20], end$[20];
    INTEGER temp_start, temp_end;
	String	temp$[100];

	start$ = "<signalType>";
	end$ = "</signalType>";
	temp_start = FIND(start$,ServerRx);
	temp_end = FIND(end$, ServerRx);
	if(temp_start = 0 || temp_end = 0){
    	Trace("Error parsing signalType, temp_start = %d, temp_end = %d\n", temp_start, temp_end);
	}
	temp$ = MID(ServerRx, (temp_start + LEN(start$)), (temp_end - temp_start) - LEN(start$));
	data.SignalType = temp$;

	start$ = "<index>";
	end$ = "</index>";
	temp_start = FIND(start$, ServerRx);
	temp_end = FIND(end$, ServerRx);
	if(temp_start = 0 || temp_end = 0){
    	Trace("Error parsing signalType, temp_start = %d, temp_end = %d\n", temp_start, temp_end);
	}
	temp$ = MID(ServerRx, (temp_start + LEN(start$)), (temp_end - temp_start) - LEN(start$));
	data.index = AtoI(temp$);
    
	start$ = "<command>";
	end$ = "</command>";
	temp_start = FIND(start$, ServerRx);
	temp_end = FIND(end$, ServerRx);
	if(temp_start = 0 || temp_end = 0){
    	Trace("Error parsing signalType, temp_start = %d, temp_end = %d\n", temp_start, temp_end);
	}
	temp$ = MID(ServerRx, (temp_start + LEN(start$)), (temp_end - temp_start) - LEN(start$));
	data.Cmd = temp$;

	start$ = "<value>";
	end$ = "</value>";
	temp_start = FIND(start$, ServerRx);
	temp_end = FIND(end$, ServerRx);
	if(temp_start = 0 || temp_end = 0){
    	Trace("Error parsing signalType, temp_start = %d, temp_end = %d\n", temp_start, temp_end);
	}
	temp$ = MID(ServerRx, (temp_start + LEN(start$)), (temp_end - temp_start) - LEN(start$));
	data.Value = temp$;

/**
    data.SignalType = REMOVE("</signalType>",ServerRx);
   	data.SignalType = LEFT(data.SignalType, (Len(data.SignalType) - Len("</signalType>")));
   	data.SignalType = RIGHT(data.SignalType, (Len(data.SignalType) - Len("<signalType>")));
	
    Index$ = REMOVE("</index>",ServerRx);
   	Index$ = LEFT(Index$, (Len(Index$) - Len("</index>")));
   	Index$ = RIGHT(Index$, (Len(Index$) - Len("<index>")));
    data.Index = AtoI(Index$);
	
	data.Cmd = REMOVE("</command>",ServerRx);
   	data.Cmd = LEFT(data.Cmd, (Len(data.Cmd) - Len("</command>")));
   	data.Cmd = RIGHT(data.Cmd, (Len(data.Cmd) - Len("<command>")));

	data.Value = REMOVE("</value>",ServerRx);
   	data.Value = LEFT(data.Value, (Len(data.Value) - Len("</value>")));
   	data.Value = RIGHT(data.Value, (Len(data.Value) - Len("<value>")));
	ValueInt = ATOI(data.Value);
**/

    if(data.Cmd = "get"){
    	if(data.SignalType = "digital"){
			CmdBuilder(data.SignalType, ItoA(data.Index), "get", ItoA(Digital_TX[data.Index]));
		}
		else if(data.SignalType = "analog"){
			CmdBuilder(data.SignalType, ItoA(data.Index), "get", ItoA(Analog_TX[data.Index]));
		}
		else if(data.SignalType = "serial"){
			CmdBuilder(data.SignalType, ItoA(data.Index), "get", Serial_TX[data.Index]);
		}
	}
    else if(data.Cmd = "set"){
    	if(data.SignalType = "digital"){
			if(ATOI(data.Value) > 1){
				Digital_RX[data.Index] = 1;
			}
			else{
				Digital_RX[data.Index] = ATOI(data.Value);
			}
			PROCESSLOGIC();
			CmdBuilder(data.SignalType, ItoA(data.Index), "set", ItoA(Digital_TX[data.Index]));
		}
		else if(data.SignalType = "analog"){
			Analog_RX[data.Index] = ATOI(data.Value);
			PROCESSLOGIC();
			CmdBuilder(data.SignalType, ItoA(data.Index), "set", ItoA(Analog_TX[data.Index]));
		}
		else if(data.SignalType = "serial"){
			Serial_RX[data.Index] = data.Value;
			PROCESSLOGIC();
			CmdBuilder(data.SignalType, ItoA(data.Index), "set", Serial_TX[data.Index]);
		}
	}
}
   

function SocketRx() {
    String Temp$[65000];
	String delimiter[100];
	INTEGER delim_length;
	//Print("InternalRxBuffer: %s\n", InternalRxBuffer);
    
	delimiter = "</DAS_transmission>";
	delim_length = LEN(delimiter) - 1;

    WHILE (LEN(InternalRxBuffer) > 1) {

		Temp$ = REMOVE(delimiter, InternalRxBuffer);
    	Temp$ = LEFT(Temp$, (Len(Temp$) - delim_length));
		Temp$ = Right(Temp$, (Len(Temp$) - (delim_length - 1)));
		CmdParser(Temp$);
	}
}

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
/*
PUSH input
{
    // TODO:  Add code here
}
*/

/*
RELEASE input
{
    // TODO:  Add code here
}
*/


CHANGE Digital_TX
{
	INTEGER ID;
	ID = GetLastModifiedArrayIndex();
	CmdBuilder("digital", LtoA(ID), "event", LtoA(Digital_TX[ID]));
}

CHANGE Analog_TX
{
	INTEGER ID;
	ID = GetLastModifiedArrayIndex();
	CmdBuilder("analog", LtoA(ID), "event", LtoA(Analog_TX[ID]));
}

CHANGE Serial_TX
{
	INTEGER ID;
	ID = GetLastModifiedArrayIndex();
	CmdBuilder("serial", LtoA(ID), "event", Serial_TX[ID]);
}


/*
EVENT
{
    // TODO:  Add code here
}
*/


SOCKETCONNECT DAS_Server {
    doServerConnected = 1;
    Print("OnConnect: input buffer size is: %d\n", Len(DAS_Server.SocketRxBuf));
}

SOCKETDISCONNECT DAS_Server {
	doServerConnected = 0;
}

SOCKETSTATUS DAS_Server {
	SIGNED_INTEGER Status;
    Status = SocketGetStatus();

    Print("The SocketGetStatus returns:       %d\n", Status);
    Print("The DAS_Server.SocketStatus returns: %d\n", DAS_Server.SocketStatus);
}

SOCKETRECEIVE DAS_Server {
	InternalRxBuffer = InternalRxBuffer + DAS_Server.SocketRxBuf;
	ClearBuffer(DAS_Server.SocketRxBuf);
	SocketRx();
}
 

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main() {
	WaitForInitializationComplete();

    StartServer();

}
